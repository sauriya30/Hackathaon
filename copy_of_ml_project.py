# -*- coding: utf-8 -*-
"""Copy of ML project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ME2s3euLvNHTLSIYCV3IF3UIyOumSKRn
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns







from google.colab import drive
drive.mount("/content/gdrive")

import pandas as pd
dataframe =pd.read_csv('/content/gdrive/My Drive/Project Datasets - 2014 (4).csv')

dataframe.head()

dataframe.describe()

dataframe.shape

dataframe.info()

del dataframe['Games Played'];
del dataframe['Goals'];
del dataframe['Successful Passes'];
del dataframe['Touches'];
del dataframe['Crosses'];
del dataframe['Shots'];

del dataframe['Red Cards'];

correlation_matrix = dataframe.corr()
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True)

sns.lineplot(x="Rank", y="S/M", data=dataframe)
plt.show()

from sklearn.linear_model import LinearRegression
model = LinearRegression()

X = dataframe[['G/M','Fouls','SP/M','T/M','Total Points','GD']]

y = dataframe[['Rank']]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

lm = LinearRegression()
lm.fit(X_train,y_train)

lm.coef_

predictions = lm.predict(X_test)

plt.scatter(y_test,predictions)
plt.xlabel('Y Test')
plt.ylabel('Predicted Y')



# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.model_selection import cross_val_score

# Instantiate learning model (k = 3)
classifier = KNeighborsClassifier(n_neighbors=3)

# Fitting the model
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
cm


accuracy = accuracy_score(y_test, y_pred)*100
print('Accuracy of our model is equal ' + str(round(accuracy, 2)) + ' %.')



dataframe1 =pd.read_csv('/content/gdrive/My Drive/Project Datasets - 2015.csv')

dataframe1.head()

dataframe1.info()



del dataframe1['Games Played'];
del dataframe1['Goals'];
del dataframe1['Successful Passes'];
del dataframe1['Touches'];
del dataframe1['Crosses'];
del dataframe1['Shots'];

dataframe1.info()

X1 = dataframe1[['G/M','Fouls','SP/M','Total Points','GD']]
y1 = dataframe1[['Rank']]

X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.3, random_state=101)

lm.fit(X1_train,y1_train)

predictions = lm.predict(X1_test)

plt.scatter(y1_test,predictions)
plt.xlabel('Y1 Test')
plt.ylabel('Predicted Y1')

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.model_selection import cross_val_score

# Instantiate learning model (k = 3)
classifier = KNeighborsClassifier(n_neighbors=5)

# Fitting the model
classifier.fit(X1_train, y1_train)

# Predicting the Test set results
y1_pred = classifier.predict(X1_test)

cm = confusion_matrix(y1_test, y1_pred)
cm


accuracy = accuracy_score(y1_test, y1_pred)*100
print('Accuracy of our model is equal ' + str(round(accuracy, 2)) + ' %.')